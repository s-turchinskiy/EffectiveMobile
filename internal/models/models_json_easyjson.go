// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels(in *jlexer.Lexer, out *UpdateSubscriptionJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ID = string(in.String())
			}
		case "service_name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ServiceName = string(in.String())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Price = int(in.Int())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.UserID = string(in.String())
			}
		case "start_date":
			if in.IsNull() {
				in.Skip()
				out.StartDate = nil
			} else {
				if out.StartDate == nil {
					out.StartDate = new(DateJSON)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					if data := in.Raw(); in.Ok() {
						in.AddError((*out.StartDate).UnmarshalJSON(data))
					}
				}
			}
		case "end_date":
			if in.IsNull() {
				in.Skip()
				out.EndDate = nil
			} else {
				if out.EndDate == nil {
					out.EndDate = new(DateJSON)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					if data := in.Raw(); in.Ok() {
						in.AddError((*out.EndDate).UnmarshalJSON(data))
					}
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels(out *jwriter.Writer, in UpdateSubscriptionJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"service_name\":"
		out.RawString(prefix)
		out.String(string(in.ServiceName))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		if in.StartDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.StartDate).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		if in.EndDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EndDate).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateSubscriptionJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateSubscriptionJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateSubscriptionJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateSubscriptionJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels(l, v)
}
func easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels1(in *jlexer.Lexer, out *SumSubscriptionsJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "period":
			if in.IsNull() {
				in.Skip()
				out.Period = nil
			} else {
				if out.Period == nil {
					out.Period = new(DateJSON)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					if data := in.Raw(); in.Ok() {
						in.AddError((*out.Period).UnmarshalJSON(data))
					}
				}
			}
		case "service_name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ServiceName = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.UserID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels1(out *jwriter.Writer, in SumSubscriptionsJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix[1:])
		if in.Period == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Period).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"service_name\":"
		out.RawString(prefix)
		out.String(string(in.ServiceName))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SumSubscriptionsJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SumSubscriptionsJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SumSubscriptionsJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SumSubscriptionsJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels1(l, v)
}
func easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels2(in *jlexer.Lexer, out *Subscriptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Subscriptions, 0, 1)
			} else {
				*out = Subscriptions{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 ReadSubscriptionJSON
			if in.IsNull() {
				in.Skip()
			} else {
				(v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels2(out *jwriter.Writer, in Subscriptions) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Subscriptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscriptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscriptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscriptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels2(l, v)
}
func easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels3(in *jlexer.Lexer, out *ReadSubscriptionJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "service_name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ServiceName = string(in.String())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Price = int(in.Int())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.UserID = string(in.String())
			}
		case "start_date":
			if in.IsNull() {
				in.Skip()
				out.StartDate = nil
			} else {
				if out.StartDate == nil {
					out.StartDate = new(DateJSON)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					if data := in.Raw(); in.Ok() {
						in.AddError((*out.StartDate).UnmarshalJSON(data))
					}
				}
			}
		case "end_date":
			if in.IsNull() {
				in.Skip()
				out.EndDate = nil
			} else {
				if out.EndDate == nil {
					out.EndDate = new(DateJSON)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					if data := in.Raw(); in.Ok() {
						in.AddError((*out.EndDate).UnmarshalJSON(data))
					}
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels3(out *jwriter.Writer, in ReadSubscriptionJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"service_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.ServiceName))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		if in.StartDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.StartDate).MarshalJSON())
		}
	}
	if in.EndDate != nil {
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		out.Raw((*in.EndDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadSubscriptionJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadSubscriptionJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadSubscriptionJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadSubscriptionJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels3(l, v)
}
func easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels4(in *jlexer.Lexer, out *CreateSubscriptionJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "service_name":
			if in.IsNull() {
				in.Skip()
			} else {
				out.ServiceName = string(in.String())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Price = int(in.Int())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
			} else {
				out.UserID = string(in.String())
			}
		case "start_date":
			if in.IsNull() {
				in.Skip()
				out.StartDate = nil
			} else {
				if out.StartDate == nil {
					out.StartDate = new(DateJSON)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					if data := in.Raw(); in.Ok() {
						in.AddError((*out.StartDate).UnmarshalJSON(data))
					}
				}
			}
		case "end_date":
			if in.IsNull() {
				in.Skip()
				out.EndDate = nil
			} else {
				if out.EndDate == nil {
					out.EndDate = new(DateJSON)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					if data := in.Raw(); in.Ok() {
						in.AddError((*out.EndDate).UnmarshalJSON(data))
					}
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels4(out *jwriter.Writer, in CreateSubscriptionJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"service_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.ServiceName))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		if in.StartDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.StartDate).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		if in.EndDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EndDate).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateSubscriptionJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateSubscriptionJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60c38f41EncodeGithubComSTurchinskiyEffectiveMobileInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateSubscriptionJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateSubscriptionJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60c38f41DecodeGithubComSTurchinskiyEffectiveMobileInternalModels4(l, v)
}
